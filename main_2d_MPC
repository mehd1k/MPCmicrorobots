import numpy as np
import sys
import Learning_module_2d as GP # type: ignore
from utils import readfile,test_gp,find_alpha_corrected, run_sim
from utils import plot_xy,plot_traj,plot_vel,plot_bounded_curves
from scipy.ndimage import uniform_filter1d
from MR_simulator import Simulator

import math 
from MPC import mpc_control, MPC
import matplotlib.pyplot as plt


req = 4
a0_def = 1.5

#first we do nothing
time_steps = 100 #do nothing for 100/30 seconds
actions_idle = np.zeros((time_steps, 2))

gp_sim = GP.LearningModule()
noise_vars= [0.0]
#first we will do absolutely nothing to try and calculate the drift term
px_idle,py_idle,alpha_idle,time_idle,freq_idle = run_sim(actions_idle,
                                                            init_pos = np.array([0,0]),
                                                            noise_var = noise_vars[0],
                                                            a0=a0_def,is_mismatched=True)



gp_sim.estimateDisturbance(px_idle, py_idle, time_idle)

#note: timestep is 1/30 seconds, the rate we get data at in the experiment
time_steps = 300 #train for 10s at 30 hz
cycles = 3 #train my moving in 3 circles

steps = (int)(time_steps / cycles)

#generate actions to move in a circle at a constant frequency
actions_circle = np.zeros( (steps, 2))


#stack the circle actions to get our learning set
actions_learn = np.vstack([actions_circle]*cycles)

t = np.linspace(0, time_steps, time_steps)

actions_learn[:,0] = (np.cos(t / 5) + 1)/2 * 4.9 + 0.1

#generate actions for testing (1/30 hz for 30 seconds)
time_steps = 1000

actions = np.zeros( (time_steps, 2) )

actions[0:200,1]   = np.linspace(0, np.pi/2, 200)
actions[200:400,1] = np.linspace(np.pi/2, -np.pi/2, 200)
actions[400:600,1] = np.linspace(-np.pi/2, 0, 200)
actions[600:800,1] = np.linspace(0, np.pi/8, 200)
actions[800::,1]  = np.linspace(np.pi/8, -np.pi, 200)

# actions[:,0] = freq # np.linspace(3, 4, time_steps)
freq_ls = np.linspace(1, 40, 40)
#actions = np.array([[1, 0.3*np.pi*((t/time_steps)-1)*(-1)**(t//300)] 
#                        for t in range(1,time_steps)]) # [T,action_dim]


for freq in freq_ls:
    time_steps = 300 #train for 10s at 30 hz
    cycles = 3 #train my moving in 3 circles

    steps = (int)(time_steps / cycles)

    #generate actions to move in a circle at a constant frequency
    actions_circle = np.zeros( (steps, 2))
    actions_circle[:,0] = freq
    actions_circle[:,1] = np.linspace(-np.pi, np.pi, steps)

    #stack the circle actions to get our learning set
    actions_learn = np.vstack([actions_circle]*cycles)

    t = np.linspace(0, time_steps, time_steps)

    actions_learn[:,0] = (np.cos(t / 5) + 1)/2 * 4.9 + 0.1

    #generate actions for testing (1/30 hz for 30 seconds)
    time_steps = 1000

    actions = np.zeros( (time_steps, 2) )

    # actions[0:200,1]   = np.linspace(0, np.pi/2, 200)
    # actions[200:400,1] = np.linspace(np.pi/2, -np.pi/2, 200)
    # actions[400:600,1] = np.linspace(-np.pi/2, 0, 200)
    # actions[600:800,1] = np.linspace(0, np.pi/8, 200)
    # actions[800::,1]  = np.linspace(np.pi/8, -np.pi, 200)

    # actions[:,0] = freq


    # THIS IS WHAT THE SIMULATION ACTUALLY GIVES US -- model mismatch && noise
    px_sim,py_sim,alpha_sim,time_sim,freq_sim = run_sim(actions_learn,
                                                         init_pos = np.array([0,0]),
                                                         noise_var = noise_vars[0],
                                                         a0=a0_def,is_mismatched=True)


    # learn noise and a0 -- note px_desired and py_desired need to be at the same time
    a0_sim = gp_sim.learn(px_sim, py_sim, alpha_sim, freq_sim, time_sim)
    print("Estimated a0 value is " + str(a0_sim))
 
    
    # THIS CALCULATES THE DESIRED TRAJECTORY FROM OUR a0 ESTIMATE
    # px_desired,py_desired,alpha_desired,time_desired,freq_desired = run_sim(actions_learn,
    #                                                                         init_pos = np.array([0,0]),
    #                                                                         noise_var = 0.0,a0=a0_sim)

    # plot the desired vs achieved velocities
    # xys  = [(px_desired,py_desired),
    #         (px_sim,py_sim),
    #        ]
    # legends =["Desired Trajectory","Simulated Trajectory (no learning)"
    #           ]
    # fig_title   = ["Learning Dataset"]
    # plot_xy(xys,legends =legends,fig_title =fig_title) 
    

    
gp_sim.visualize()


